// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteV0PluginData, DeleteV0PluginResponse, GetV0PluginData, GetV0PluginResponse, PutV0PluginData, PutV0PluginResponse, GetV0PluginExtData, GetV0PluginExtResponse, PatchV0PluginExtData, PatchV0PluginExtResponse, PostV0DifyRetrievalData, PostV0DifyRetrievalResponse, PostV0DifyRetrievalError, PostV0BaseKnowledgeIdSearchData, PostV0BaseKnowledgeIdSearchResponse, PostV0BaseKnowledgeIdSearchError, DeleteV0BaseData, DeleteV0BaseResponse, GetV0BaseData, GetV0BaseResponse, PutV0BaseData, PutV0BaseResponse, DeleteV0BaseKnowledgeIdEmbedderData, DeleteV0BaseKnowledgeIdEmbedderResponse, GetV0BaseKnowledgeIdEmbedderData, GetV0BaseKnowledgeIdEmbedderResponse, PostV0BaseKnowledgeIdEmbedderData, PostV0BaseKnowledgeIdEmbedderResponse, GetSystemData, GetSystemResponse, PostSystemData, PostSystemResponse, PostSystemError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete a plugin
 */
export const deleteV0Plugin = <ThrowOnError extends boolean = false>(options: Options<DeleteV0PluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV0PluginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin',
        ...options
    });
};

/**
 * List plugins
 */
export const getV0Plugin = <ThrowOnError extends boolean = false>(options?: Options<GetV0PluginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0PluginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin',
        ...options
    });
};

/**
 * Install a plugin
 */
export const putV0Plugin = <ThrowOnError extends boolean = false>(options: Options<PutV0PluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV0PluginResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get extension-plugin mapping
 */
export const getV0PluginExt = <ThrowOnError extends boolean = false>(options?: Options<GetV0PluginExtData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0PluginExtResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin/ext',
        ...options
    });
};

/**
 * Modify extension-plugin mapping
 */
export const patchV0PluginExt = <ThrowOnError extends boolean = false>(options: Options<PatchV0PluginExtData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchV0PluginExtResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin/ext',
        ...options
    });
};

/**
 * Search as an external knowledge base for Dify
 */
export const postV0DifyRetrieval = <ThrowOnError extends boolean = false>(options?: Options<PostV0DifyRetrievalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV0DifyRetrievalResponse, PostV0DifyRetrievalError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/dify/retrieval',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Knowledge base search
 */
export const postV0BaseKnowledgeIdSearch = <ThrowOnError extends boolean = false>(options: Options<PostV0BaseKnowledgeIdSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV0BaseKnowledgeIdSearchResponse, PostV0BaseKnowledgeIdSearchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/:knowledgeId/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * del knowledge base
 */
export const deleteV0Base = <ThrowOnError extends boolean = false>(options?: Options<DeleteV0BaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteV0BaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get knowledge bases
 */
export const getV0Base = <ThrowOnError extends boolean = false>(options?: Options<GetV0BaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0BaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base',
        ...options
    });
};

/**
 * add knowledge base
 */
export const putV0Base = <ThrowOnError extends boolean = false>(options?: Options<PutV0BaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutV0BaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * reset knowledge base embedders
 */
export const deleteV0BaseKnowledgeIdEmbedder = <ThrowOnError extends boolean = false>(options: Options<DeleteV0BaseKnowledgeIdEmbedderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV0BaseKnowledgeIdEmbedderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/:knowledgeId/embedder',
        ...options
    });
};

/**
 * get knowledge base embedders
 */
export const getV0BaseKnowledgeIdEmbedder = <ThrowOnError extends boolean = false>(options: Options<GetV0BaseKnowledgeIdEmbedderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV0BaseKnowledgeIdEmbedderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/:knowledgeId/embedder',
        ...options
    });
};

/**
 * update knowledge base embedder
 */
export const postV0BaseKnowledgeIdEmbedder = <ThrowOnError extends boolean = false>(options: Options<PostV0BaseKnowledgeIdEmbedderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV0BaseKnowledgeIdEmbedderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/:knowledgeId/embedder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get system status
 */
export const getSystem = <ThrowOnError extends boolean = false>(options?: Options<GetSystemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemResponse, unknown, ThrowOnError>({
        url: '/system',
        ...options
    });
};

/**
 * set system config
 */
export const postSystem = <ThrowOnError extends boolean = false>(options?: Options<PostSystemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSystemResponse, PostSystemError, ThrowOnError>({
        url: '/system',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};