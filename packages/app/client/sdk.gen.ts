// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetV0PluginMarketData, GetV0PluginMarketResponses, DeleteV0PluginData, DeleteV0PluginResponses, GetV0PluginData, GetV0PluginResponses, PutV0PluginData, PutV0PluginResponses, GetV0PluginExtData, GetV0PluginExtResponses, PatchV0PluginExtData, PatchV0PluginExtResponses, PostV0DifyRetrievalData, PostV0DifyRetrievalResponses, PostV0DifyRetrievalErrors, PostV0BaseByKnowledgeIdSearchData, PostV0BaseByKnowledgeIdSearchResponses, PostV0BaseByKnowledgeIdSearchErrors, DeleteV0BaseData, DeleteV0BaseResponses, GetV0BaseData, GetV0BaseResponses, PutV0BaseData, PutV0BaseResponses, DeleteV0BaseByKnowledgeIdEmbedderData, DeleteV0BaseByKnowledgeIdEmbedderResponses, GetV0BaseByKnowledgeIdEmbedderData, GetV0BaseByKnowledgeIdEmbedderResponses, PostV0BaseByKnowledgeIdEmbedderData, PostV0BaseByKnowledgeIdEmbedderResponses, GetSystemData, GetSystemResponses, PostSystemData, PostSystemResponses, PostSystemErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List market plugin
 */
export const getV0PluginMarket = <ThrowOnError extends boolean = false>(options?: Options<GetV0PluginMarketData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0PluginMarketResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin/market',
        ...options
    });
};

/**
 * Delete a plugin
 */
export const deleteV0Plugin = <ThrowOnError extends boolean = false>(options: Options<DeleteV0PluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV0PluginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin',
        ...options
    });
};

/**
 * List plugins
 */
export const getV0Plugin = <ThrowOnError extends boolean = false>(options?: Options<GetV0PluginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0PluginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin',
        ...options
    });
};

/**
 * Install a plugin
 */
export const putV0Plugin = <ThrowOnError extends boolean = false>(options: Options<PutV0PluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV0PluginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get extension-plugin mapping
 */
export const getV0PluginExt = <ThrowOnError extends boolean = false>(options?: Options<GetV0PluginExtData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0PluginExtResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin/ext',
        ...options
    });
};

/**
 * Modify extension-plugin mapping
 */
export const patchV0PluginExt = <ThrowOnError extends boolean = false>(options: Options<PatchV0PluginExtData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchV0PluginExtResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/plugin/ext',
        ...options
    });
};

/**
 * Search as an external knowledge base for Dify
 */
export const postV0DifyRetrieval = <ThrowOnError extends boolean = false>(options?: Options<PostV0DifyRetrievalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV0DifyRetrievalResponses, PostV0DifyRetrievalErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/dify/retrieval',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Knowledge base search
 */
export const postV0BaseByKnowledgeIdSearch = <ThrowOnError extends boolean = false>(options: Options<PostV0BaseByKnowledgeIdSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV0BaseByKnowledgeIdSearchResponses, PostV0BaseByKnowledgeIdSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/{knowledgeId}/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * del knowledge base
 */
export const deleteV0Base = <ThrowOnError extends boolean = false>(options?: Options<DeleteV0BaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteV0BaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get knowledge bases
 */
export const getV0Base = <ThrowOnError extends boolean = false>(options?: Options<GetV0BaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV0BaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base',
        ...options
    });
};

/**
 * add knowledge base
 */
export const putV0Base = <ThrowOnError extends boolean = false>(options?: Options<PutV0BaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutV0BaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * reset knowledge base embedders
 */
export const deleteV0BaseByKnowledgeIdEmbedder = <ThrowOnError extends boolean = false>(options: Options<DeleteV0BaseByKnowledgeIdEmbedderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV0BaseByKnowledgeIdEmbedderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/{knowledgeId}/embedder',
        ...options
    });
};

/**
 * get knowledge base embedders
 */
export const getV0BaseByKnowledgeIdEmbedder = <ThrowOnError extends boolean = false>(options: Options<GetV0BaseByKnowledgeIdEmbedderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV0BaseByKnowledgeIdEmbedderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/{knowledgeId}/embedder',
        ...options
    });
};

/**
 * update knowledge base embedder
 */
export const postV0BaseByKnowledgeIdEmbedder = <ThrowOnError extends boolean = false>(options: Options<PostV0BaseByKnowledgeIdEmbedderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV0BaseByKnowledgeIdEmbedderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v0/base/{knowledgeId}/embedder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * get system status
 */
export const getSystem = <ThrowOnError extends boolean = false>(options?: Options<GetSystemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemResponses, unknown, ThrowOnError>({
        url: '/system',
        ...options
    });
};

/**
 * set system config
 */
export const postSystem = <ThrowOnError extends boolean = false>(options?: Options<PostSystemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSystemResponses, PostSystemErrors, ThrowOnError>({
        url: '/system',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};