// This file is auto-generated by @hey-api/openapi-ts

export type DifyKnowledgeResponseRecordSchema = {
    text: string;
    score: number;
    title: string;
    metadata?: unknown;
};

export type DifyKnowledgeRequestSchema = {
    knowledge_id: string;
    query: string;
    retrieval_setting: {
        top_k: number;
        score_threshold: number;
    };
};

export type SearchResult = {
    hash: string;
    paths: Array<string>;
    text: string;
};

export type SearchResults = Array<SearchResult>;

export type SearchParam = {
    /**
     * 搜索查询内容
     */
    q?: string;
    /**
     * 分页偏移量
     */
    offset?: number;
    /**
     * 每页限制数量
     */
    limit?: number;
    /**
     * 需要高亮的属性数组
     */
    attributesToHighlight?: Array<string>;
    /**
     * 高亮前缀标签
     */
    highlightPreTag?: string;
    /**
     * 高亮后缀标签
     */
    highlightPostTag?: string;
    /**
     * 需要裁剪的属性数组
     */
    attributesToCrop?: Array<string>;
    /**
     * 裁剪长度
     */
    cropLength?: number;
    /**
     * 裁剪标记
     */
    cropMarker?: string;
    /**
     * 过滤条件
     */
    filter?: string | Array<string | Array<string>>;
    /**
     * 排序条件数组
     */
    sort?: Array<string>;
    /**
     * 分面搜索字段数组
     */
    facets?: Array<string>;
    /**
     * 需要检索的属性数组
     */
    attributesToRetrieve?: Array<string>;
    /**
     * 是否显示匹配位置
     */
    showMatchesPosition?: boolean;
    /**
     * 匹配策略
     */
    matchingStrategy?: 'all' | 'last' | 'frequency';
    /**
     * 每页命中数
     */
    hitsPerPage?: number;
    /**
     * 页码
     */
    page?: number;
    /**
     * 分面名称
     */
    facetName?: string;
    /**
     * 分面查询条件
     */
    facetQuery?: string;
    /**
     * 向量数组
     */
    vector?: Array<number> | null;
    /**
     * 是否显示排名分数
     */
    showRankingScore?: boolean;
    /**
     * 是否显示排名分数详情
     */
    showRankingScoreDetails?: boolean;
    /**
     * 排名分数阈值
     */
    rankingScoreThreshold?: number;
    /**
     * 搜索字段数组
     */
    attributesToSearchOn?: Array<string> | null;
    /**
     * 去重字段
     */
    distinct?: string;
    /**
     * 是否检索向量
     */
    retrieveVectors?: boolean;
    /**
     * 语言区域数组
     */
    locales?: Array<string>;
};

export type DeletePluginData = {
    body?: never;
    path?: never;
    query: {
        name: string;
    };
    url: '/plugin';
};

export type DeletePluginResponses = {
    /**
     * Whether the plugin was successfully deleted
     */
    200: {
        deleted: boolean;
        msg?: string;
    };
};

export type DeletePluginResponse = DeletePluginResponses[keyof DeletePluginResponses];

export type GetPluginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plugin';
};

export type GetPluginResponses = {
    /**
     * List of plugins
     */
    200: {
        docLoaders: Array<{
            name: string;
            pluginType: 'DocLoader';
            exts: Array<string>;
        }>;
        docSplitter: {
            name: string;
            pluginType: 'DocSplitter';
        };
    };
};

export type GetPluginResponse = GetPluginResponses[keyof GetPluginResponses];

export type PutPluginData = {
    body?: unknown;
    path?: never;
    query: {
        name: string;
    };
    url: '/plugin';
};

export type PutPluginResponses = {
    /**
     * Whether the plugin was successfully installed
     */
    200: {
        installed: boolean;
        msg?: string;
    };
};

export type PutPluginResponse = PutPluginResponses[keyof PutPluginResponses];

export type GetPluginExtData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plugin/ext';
};

export type GetPluginExtResponses = {
    /**
     * Plugin-extension mapping
     */
    200: {
        [key: string]: string;
    };
};

export type GetPluginExtResponse = GetPluginExtResponses[keyof GetPluginExtResponses];

export type PatchPluginExtData = {
    body?: never;
    path?: never;
    query: {
        ext: string;
        docLoaderName?: string;
    };
    url: '/plugin/ext';
};

export type PatchPluginExtResponses = {
    /**
     * Whether the mapping was successfully modified
     */
    200: {
        modified: boolean;
    };
};

export type PatchPluginExtResponse = PatchPluginExtResponses[keyof PatchPluginExtResponses];

export type PostDifyRetrievalData = {
    body?: DifyKnowledgeRequestSchema;
    path?: never;
    query?: never;
    url: '/dify/retrieval';
};

export type PostDifyRetrievalErrors = {
    /**
     * AccessDeniedException
     */
    403: {
        error_code: '1002' | '1001';
        error_msg: string;
    };
    /**
     * KnowledgeDoesNotExist
     */
    404: {
        error_code: '2001';
        error_msg: string;
    };
};

export type PostDifyRetrievalError = PostDifyRetrievalErrors[keyof PostDifyRetrievalErrors];

export type PostDifyRetrievalResponses = {
    /**
     * Search results
     */
    200: {
        records: Array<DifyKnowledgeResponseRecordSchema>;
    };
};

export type PostDifyRetrievalResponse = PostDifyRetrievalResponses[keyof PostDifyRetrievalResponses];

export type PostBaseKnowledgeIdSearchData = {
    body?: SearchParam;
    path: {
        knowledgeId: string;
    };
    query?: never;
    url: '/base/:knowledgeId/search';
};

export type PostBaseKnowledgeIdSearchErrors = {
    /**
     * KnowledgeDoesNotExist
     */
    404: {
        error_code: '2001';
        error_msg: string;
    };
};

export type PostBaseKnowledgeIdSearchError = PostBaseKnowledgeIdSearchErrors[keyof PostBaseKnowledgeIdSearchErrors];

export type PostBaseKnowledgeIdSearchResponses = {
    /**
     * Search results
     */
    200: SearchResults;
};

export type PostBaseKnowledgeIdSearchResponse = PostBaseKnowledgeIdSearchResponses[keyof PostBaseKnowledgeIdSearchResponses];

export type DeleteBaseBaseData = {
    body?: {
        id: string;
    };
    path?: never;
    query?: never;
    url: '/base/base';
};

export type DeleteBaseBaseResponses = {
    /**
     * del base status
     */
    200: {
        deleted: boolean;
    };
};

export type DeleteBaseBaseResponse = DeleteBaseBaseResponses[keyof DeleteBaseBaseResponses];

export type GetBaseBaseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/base/base';
};

export type GetBaseBaseResponses = {
    /**
     * all base
     */
    200: Array<{
        name: string;
        id: string;
        path: string;
    }>;
};

export type GetBaseBaseResponse = GetBaseBaseResponses[keyof GetBaseBaseResponses];

export type PutBaseBaseData = {
    body?: {
        name: string;
    };
    path?: never;
    query?: never;
    url: '/base/base';
};

export type PutBaseBaseResponses = {
    /**
     * added base
     */
    200: {
        name: string;
        id: string;
        path: string;
    };
};

export type PutBaseBaseResponse = PutBaseBaseResponses[keyof PutBaseBaseResponses];

export type DeleteBaseKnowledgeIdEmbedderData = {
    body?: never;
    path: {
        knowledgeId: string;
    };
    query?: never;
    url: '/base/:knowledgeId/embedder';
};

export type DeleteBaseKnowledgeIdEmbedderResponses = {
    /**
     * Embedders reset successfully
     */
    200: {
        status: 'succeeded' | 'processing' | 'failed' | 'enqueued' | 'canceled';
    };
};

export type DeleteBaseKnowledgeIdEmbedderResponse = DeleteBaseKnowledgeIdEmbedderResponses[keyof DeleteBaseKnowledgeIdEmbedderResponses];

export type GetBaseKnowledgeIdEmbedderData = {
    body?: never;
    path: {
        knowledgeId: string;
    };
    query?: never;
    url: '/base/:knowledgeId/embedder';
};

export type GetBaseKnowledgeIdEmbedderResponses = {
    /**
     * Embedders
     */
    200: {
        [key: string]: {
            source: 'openAi';
            model?: string;
            apiKey?: string;
            documentTemplate?: string;
            dimensions?: number;
            distribution?: {
                mean: number;
                sigma: number;
            };
            url?: string;
            documentTemplateMaxBytes?: number;
            binaryQuantized?: boolean;
        } | {
            source: 'huggingFace';
            model?: string;
            revision?: string;
            documentTemplate?: string;
            distribution?: {
                mean: number;
                sigma: number;
            };
            documentTemplateMaxBytes?: number;
            binaryQuantized?: boolean;
        } | {
            source: 'userProvided';
            dimensions: number;
            distribution?: {
                mean: number;
                sigma: number;
            };
            binaryQuantized?: boolean;
        } | {
            source: 'rest';
            url: string;
            apiKey?: string;
            dimensions?: number;
            documentTemplate?: string;
            distribution?: {
                mean: number;
                sigma: number;
            };
            request: {};
            response: {};
            headers?: {
                [key: string]: string;
            };
            documentTemplateMaxBytes?: number;
            binaryQuantized?: boolean;
        } | {
            source: 'ollama';
            url?: string;
            apiKey?: string;
            model?: string;
            documentTemplate?: string;
            distribution?: {
                mean: number;
                sigma: number;
            };
            dimensions?: number;
            documentTemplateMaxBytes?: number;
            binaryQuantized?: boolean;
        } | null;
    } | null;
};

export type GetBaseKnowledgeIdEmbedderResponse = GetBaseKnowledgeIdEmbedderResponses[keyof GetBaseKnowledgeIdEmbedderResponses];

export type PostBaseKnowledgeIdEmbedderData = {
    body?: {
        embedders: {
            [key: string]: {
                source: 'openAi';
                model?: string;
                apiKey?: string;
                documentTemplate?: string;
                dimensions?: number;
                distribution?: {
                    mean: number;
                    sigma: number;
                };
                url?: string;
                documentTemplateMaxBytes?: number;
                binaryQuantized?: boolean;
            } | {
                source: 'huggingFace';
                model?: string;
                revision?: string;
                documentTemplate?: string;
                distribution?: {
                    mean: number;
                    sigma: number;
                };
                documentTemplateMaxBytes?: number;
                binaryQuantized?: boolean;
            } | {
                source: 'userProvided';
                dimensions: number;
                distribution?: {
                    mean: number;
                    sigma: number;
                };
                binaryQuantized?: boolean;
            } | {
                source: 'rest';
                url: string;
                apiKey?: string;
                dimensions?: number;
                documentTemplate?: string;
                distribution?: {
                    mean: number;
                    sigma: number;
                };
                request: {};
                response: {};
                headers?: {
                    [key: string]: string;
                };
                documentTemplateMaxBytes?: number;
                binaryQuantized?: boolean;
            } | {
                source: 'ollama';
                url?: string;
                apiKey?: string;
                model?: string;
                documentTemplate?: string;
                distribution?: {
                    mean: number;
                    sigma: number;
                };
                dimensions?: number;
                documentTemplateMaxBytes?: number;
                binaryQuantized?: boolean;
            } | null;
        } | null;
    };
    path: {
        knowledgeId: string;
    };
    query?: never;
    url: '/base/:knowledgeId/embedder';
};

export type PostBaseKnowledgeIdEmbedderResponses = {
    /**
     * Embedder updated successfully
     */
    200: {
        status: 'succeeded' | 'processing' | 'failed' | 'enqueued' | 'canceled';
    };
};

export type PostBaseKnowledgeIdEmbedderResponse = PostBaseKnowledgeIdEmbedderResponses[keyof PostBaseKnowledgeIdEmbedderResponses];

export type ClientOptions = {
    baseUrl: `${string}://client` | (string & {});
};